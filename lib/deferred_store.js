// Generated by CoffeeScript 1.6.2
(function() {
  var DeferredStore, MemcachedStore, MemoryStore, Q, RedisStore, deferredHander;

  MemcachedStore = require('./memcached_store');

  RedisStore = require('./redis_store');

  MemoryStore = require('./memory_store');

  Q = require('q');

  deferredHander = function(deferred) {
    return function(err, res) {
      if (err != null) {
        return deferred.reject(err);
      } else {
        return deferred.resolve(res);
      }
    };
  };

  DeferredStore = (function() {
    function DeferredStore(type, location) {
      this.store = (function() {
        switch (type) {
          case "redis":
            return new RedisStore(location);
          case "memcached":
            return new MemcachedStore(location);
          default:
            return new MemoryStore(location);
        }
      })();
    }

    DeferredStore.prototype.keys = function(filter) {
      var deferred;

      if (filter == null) {
        filter = "*";
      }
      deferred = Q.defer();
      this.store.keys(filter, deferredHander(deferred));
      return deferred.promise;
    };

    DeferredStore.prototype.set = function(key, value) {
      var deferred;

      deferred = Q.defer();
      this.store.set(key, value, deferredHander(deferred));
      return deferred.promise;
    };

    DeferredStore.prototype.get = function(key) {
      var deferred;

      deferred = Q.defer();
      this.store.get(key, deferredHander(deferred));
      return deferred.promise;
    };

    DeferredStore.prototype.has = function(key) {
      var deferred;

      deferred = Q.defer();
      this.store.has(key, deferredHander(deferred));
      return deferred.promise;
    };

    DeferredStore.prototype.del = function(key) {
      var deferred;

      deferred = Q.defer();
      this.store.del(key, deferredHander(deferred));
      return deferred.promise;
    };

    DeferredStore.prototype.flush = function() {
      var deferred;

      deferred = Q.defer();
      this.store.flush(deferredHander(deferred));
      return deferred.promise;
    };

    DeferredStore.prototype.quit = function() {
      return this.store.quit();
    };

    return DeferredStore;

  })();

  module.exports = DeferredStore;

}).call(this);
